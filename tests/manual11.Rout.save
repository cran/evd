
R : Copyright 2001, The R Development Core Team
Version 1.3.1  (2001-08-31)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type `license()' or `licence()' for distribution details.

R is a collaborative project with many contributors.
Type `contributors()' for more information.

Type `demo()' for some demos, `help()' for on-line help, or
`help.start()' for a HTML browser interface to help.
Type `q()' to quit R.

> ###################
> # FROM MANUAL 1.1 #
> ###################
> 
> library(evd)
> options(digits = 4, width = 80)
> set.seed(50)
> 
> # Section: Standard Univariate Functions
> 
> rgev(6, loc = c(2,1), scale = .5, shape = 1)
[1] 1.6355 2.6562 5.7309 0.6468 2.3299 3.0512
> qrweibull(seq(0.1, 0.4, 0.1), 2, 0.5, 1, lower.tail = FALSE)
[1] 1.947 1.888 1.822 1.745
> qrweibull(seq(0.9, 0.6, -0.1), loc = 2, scale = 0.5, shape = 1)
[1] 1.947 1.888 1.822 1.745
> pfrechet(2:6, 2, 0.5, 1)
[1] 0.0000 0.6065 0.7788 0.8465 0.8825
> pfrechet(2:6, 2, 0.5, 1, low = FALSE)
[1] 1.0000 0.3935 0.2212 0.1535 0.1175
> drweibull(-1:3, 2, 0.5, log = TRUE)
[1] -5.307 -3.307 -1.307   -Inf   -Inf
> dgumbel(-1:3, 0, 1)
[1] 0.17937 0.36788 0.25465 0.11820 0.04737
> 
> rext(4, qexp, rate = 1, mlen = 5)
[1] 2.2001 0.8584 4.5595 3.9397
> rext(4, distn = "exp", rate = 1, mlen = 5)
[1] 1.604 1.599 4.053 2.220
> rext(4, distn = "exp", mlen = 5)
[1] 4.906 3.304 3.157 2.291
> rext(1, distn = "norm", sd = 2, mlen = 20, largest = FALSE)
[1] -4.403
> min(rnorm(20, mean = 0, sd = 2))
[1] -2.612
> pext(c(.4, .5), distn = "norm", mean = 0.5, sd = c(1, 2), mlen = 4)
[1] 0.04484 0.06250
> dext(c(1, 4), distn = "gamma", shape = 1, scale = 0.3, mlen = 100)
[1] 0.3261328 0.0005398
> 
> rorder(1, distn = "norm", mlen = 20, j = 2)
[1] 2.284
> rorder(1, distn = "norm", mlen = 20, j = 19, largest = FALSE)
[1] 1.056
> porder(c(1, 2), distn = "gamma", shape = c(.5, .7), mlen = 10, j = 2)
[1] 0.5177 0.8259
> dorder(c(1, 2), distn = "gamma", shape = c(.5, .7), mlen = 10, j = 2)
[1] 0.7473 0.3081
> 
> # Section: Standard Bivariate Functions
> 
> rbvalog(3, dep = .8, asy = c(.4, 1))
         [,1]    [,2]
[1,]  0.07876 -0.7971
[2,]  0.01091 -0.8113
[3,] -0.10491 -0.8831
> rbvnegbilog(3, alpha = .5, beta = 1.2, mar1 = c(1, 1, 1))
       [,1]  [,2]
[1,] 0.7417 1.085
[2,] 0.8391 1.825
[3,] 2.0142 2.280
> pbvaneglog(c(1, 1.2), dep = .4, asy = c(.4, .6), mar1 = c(1, 1, 1))
[1] 0.173
> tmp.quant <- matrix(c(1,1.2,1,2),ncol = 2, byrow = TRUE)
> tmp.mar <- matrix(c(1,1,1,1.2,1.2,1.2), ncol = 3, byrow = TRUE)
> pbvaneglog(tmp.quant, dep = .4, asy = c(.4, .6), mar1 = tmp.mar)
[1] 0.173 0.175
> dbvct(c(1, 1.2), alpha = .2, beta = .6, mar1 = c(1, 1, 1))
[1] 0.1213
> dbvct(tmp.quant, alpha = 0.2, beta = 0.6, mar1 = tmp.mar)
[1] 0.1213 0.0586
> abvlog(dep = .3)
[1] 0.6156
> abvlog(seq(0, 1, 0.25), dep = .3)
[1] 1.0000 0.7557 0.6156 0.7557 1.0000
> 
> # Section: Standard Multivariate Functions
> 
> rmvlog(3, dep = .6, d = 5)
        [,1]    [,2]    [,3]     [,4]  [,5]
[1,]  0.1335  0.2878 1.07886  1.55515 1.310
[2,]  1.7100  0.9453 1.02070 -0.02553 1.527
[3,] -0.3376 -0.5814 0.07426  0.10906 2.827
> tmp.mar <- matrix(c(1,1,1,1,1,1.5,1,1,2), ncol = 3, byrow = TRUE)
> rmvlog(3, dep = .6, d = 5, mar = tmp.mar)
      [,1]   [,2]   [,3]   [,4]  [,5]
[1,] 2.803 4.6415 1.8531 3.5569 8.854
[2,] 0.751 0.9704 2.3328 2.6537 1.233
[3,] 4.641 1.4321 0.5825 0.6041 2.021
> tmp.quant <- matrix(rep(c(1,1.5,2), 5), ncol = 5)
> pmvlog(tmp.quant, dep = .6, d = 5, mar = tmp.mar)
[1] 0.07233 0.16387 0.21949
> 
> rmvalog(3, dep = c(.6,.5,.8,.3), asy = list(.4,0,.6,c(.3,.2),c(.1,.1),c(.4,.1),c(.2,.4,.2)), d = 3)
         [,1]    [,2]    [,3]
[1,]  0.52375 -0.8844  1.4898
[2,]  1.16174 -0.4368 -0.7404
[3,] -0.03737  1.5139 -0.5996
> pmvalog(c(2, 2, 2), dep = c(.6,.5,.8,.3), asy = list(.4,.0,.6,c(.3,.2),c(.1,.1),c(.4,.1),c(.2,.4,.2)), d = 3)
[1] 0.7223
> tmp.quant <- matrix(rep(c(1,1.5,2), 3), ncol = 3)
> pmvalog(tmp.quant, dep = c(.6,.5,.8,.3), asy = list(.4,.0,.6,c(.3,.2),c(.1,.1),c(.4,.1),c(.2,.4,.2)), d = 3)
[1] 0.4131 0.5849 0.7223
> rmvalog(3, dep = c(rep(1,6),.7,.3,.8,.7,.5), asy = list(0, 0, 0, 0, c(0,0), c(0,0), c(0,0), c(0,0), c(0,0), c(0,0), c(.2,.1,.2), c(.1,.1,.2), c(.3,.4,.1), c(.2,.2,.2), c(.4,.6,.2,.5)), d = 4)
        [,1]    [,2]    [,3]    [,4]
[1,] -0.5930 -0.1916  1.0211  0.6113
[2,]  4.3522 -1.0050  2.3618 -0.1875
[3,]  0.5805  0.4443 -0.5958  0.9717
> rmvalog(3, dep = c(.6,1,.8,.3), asy = list(.4,0,.6,c(.3,.2),c(0,0),c(.4,.1),c(.3,.4,.3)), d = 3)
       [,1]    [,2]    [,3]
[1,]  4.627  2.9125  0.9414
[2,]  1.200  0.1556  0.2048
[3,] -1.159 -0.8749 -1.0340
> 
> # Section: Fitting Univariate Distributions by Maximum Likelihood
> 
> data <- rgev(1000, loc = 0.13, scale = 1.1, shape = 0.2)
> fgev(data)
$estimate
   loc  scale  shape 
0.1650 1.1368 0.2035 

$std.err
    loc   scale   shape 
0.04053 0.03215 0.02486 

$deviance
[1] 3645

$counts
function gradient 
      56       12 

> fgev(data, loc = 0, scale = 1)
$estimate
 shape 
0.2282 

$std.err
  shape 
0.02116 

$deviance
[1] 3670

$counts
function gradient 
      23        7 

> 
> data2 <- rext(100, qnorm, mean = 0.56, mlen = 365)
> fext(data2, list(mean = 0, sd = 1), distn = "norm", mlen = 365)
$estimate
  mean     sd 
0.5950 0.9928 

$std.err
   mean      sd 
0.20337 0.07418 

$deviance
[1] 80.58

$counts
function gradient 
      59       NA 

> fext(data2, list(scale = 1), shape = 0.5, distn = "gamma", mlen = 365)
$estimate
 scale 
0.7396 

$std.err
  scale 
0.01576 

$deviance
[1] 151.6

$counts
function gradient 
      28       NA 

> 
> # Section: Fitting Bivariate Distributions by Maximum Likelihood
> 
> bvdata <- rbvlog(100, dep = 0.6, mar1 = c(1.2,1.4,0), mar2 = c(1,1.6,0.1))
> fbvlog(bvdata)
$estimate
   loc1  scale1  shape1    loc2  scale2  shape2     dep 
1.16881 1.67308 0.02413 1.00118 1.66516 0.12351 0.47628 

$std.err
   loc1  scale1  shape1    loc2  scale2  shape2     dep 
0.18838 0.14239 0.06976 0.18515 0.14291 0.06650 0.04796 

$deviance
[1] 772.8

$counts
function gradient 
      52       14 

> fbvlog(bvdata, dep = 1)
$estimate
   loc1  scale1  shape1    loc2  scale2  shape2 
1.19204 1.66900 0.02933 0.97984 1.66732 0.13177 

$std.err
   loc1  scale1  shape1    loc2  scale2  shape2 
0.19276 0.14394 0.08808 0.19102 0.14709 0.08528 

$deviance
[1] 855.4

$counts
function gradient 
       5        1 

> fbvlog(bvdata, shape1 = 0, shape2 = 0)
$estimate
  loc1 scale1   loc2 scale2    dep 
1.1962 1.6296 1.1242 1.7868 0.4983 

$std.err
   loc1  scale1    loc2  scale2     dep 
0.17071 0.12400 0.18661 0.13875 0.04797 

$deviance
[1] 777.5

$counts
function gradient 
      39       11 

> pchisq(748.4 - 728, df = 2, lower.tail = FALSE)
[1] 3.717e-05
> 
> # Boundary Problems
> 
> fbvalog(bvdata)
$estimate
   loc1  scale1  shape1    loc2  scale2  shape2    asy1    asy2     dep 
1.19015 1.70785 0.02964 0.97453 1.63160 0.13115 0.79884 0.96855 0.38475 

$std.err
   loc1  scale1  shape1    loc2  scale2  shape2    asy1    asy2     dep 
0.19191 0.14565 0.07346 0.18601 0.14148 0.06883 0.11066 0.06191 0.06351 

$deviance
[1] 770.1

$counts
function gradient 
      74       17 

> fbvalog(bvdata, asy2 = 1)$estimate
   loc1  scale1  shape1    loc2  scale2  shape2    asy1     dep 
1.18205 1.69827 0.03636 0.96354 1.62993 0.13856 0.82014 0.40550 
> fbvalog(bvdata, method = "L-BFGS-B", lower = c(rep(-Inf, 6), 0, 0, -Inf), upper = c(rep(Inf, 6), 1, 1, Inf))$estimate
   loc1  scale1  shape1    loc2  scale2  shape2    asy1    asy2     dep 
1.19019 1.70787 0.02967 0.97451 1.63160 0.13117 0.79877 0.96855 0.38471 
> 
> # Section: Extended Example: Oxford Data
> 
> data(oxford)
> oxford.fit.trend <- fgev(oxford, nsloc = (1901:1980 - 1950)/100)
> oxford.fit.trend
$estimate
     loc loctrend    scale    shape 
 83.6617  -1.8812   4.2233  -0.2841 

$std.err
     loc loctrend    scale    shape 
 0.55566  1.96754  0.36504  0.07068 

$deviance
[1] 456.9

$counts
function gradient 
      33       14 

> 
> oxford.fit <- fgev(oxford)
> oxford.fit <- fgev(oxford, nsloc = (1901:1980 - 1950)/100, loctrend = 0)
> oxford.fit
$estimate
    loc   scale   shape 
83.8392  4.2599 -0.2873 

$std.err
    loc   scale   shape 
0.52311 0.36579 0.06833 

$deviance
[1] 457.8

$counts
function gradient 
      29       11 

> 
> fgev(oxford, shape = 0)$deviance - oxford.fit$deviance
[1] 12
> mle <- oxford.fit$estimate
> as.vector(mle[1] - mle[2]/mle[3])
[1] 98.67
> range(oxford)
[1] 75 95
> 
> fext(oxford, start = list(mean = 40, sd = 1), distn = "norm", mlen = 365)
$estimate
 mean    sd 
48.85 12.43 

$std.err
  mean     sd 
2.7204 0.9928 

$deviance
[1] 464.2

$counts
function gradient 
      51       NA 

> fext(oxford, start = list(scale = 1, shape = 1), distn = "gamma", mlen = 365)
$estimate
scale shape 
 1.63 32.94 

$std.err
 scale  shape 
0.2407 6.0378 

$deviance
[1] 465.9

$counts
function gradient 
     353       NA 

> 
> # Section: Extended Example: Sea Level Data
> 
> data(sealevel)
> sl <- sealevel
> tvec <- (1912:1992 - 1950)/100
> m1 <- fbvlog(sl, nsloc1 = tvec, nsloc2 = tvec)
> m2 <- fbvlog(sl, nsloc1 = tvec)
> m3 <- fbvlog(sl)
> 
> pchisq(m3$deviance - m2$deviance, df = 1, lower.tail = FALSE)
[1] 9.743e-06
> pchisq(m2$deviance - m1$deviance, df = 1, lower.tail = FALSE)
[1] 0.007048
> pchisq(m3$deviance - m1$deviance, df = 2, lower.tail = FALSE)
[1] 1.499e-06
> 
> mle <- m1$estimate
> as.vector(mle[1] + tvec * mle[2] - mle[3]/mle[4])
 [1] 1.017 1.021 1.026 1.030 1.035 1.039 1.043 1.048 1.052 1.057 1.061 1.065
[13] 1.070 1.074 1.079 1.083 1.087 1.092 1.096 1.101 1.105 1.109 1.114 1.118
[25] 1.123 1.127 1.131 1.136 1.140 1.145 1.149 1.153 1.158 1.162 1.166 1.171
[37] 1.175 1.180 1.184 1.188 1.193 1.197 1.202 1.206 1.210 1.215 1.219 1.224
[49] 1.228 1.232 1.237 1.241 1.246 1.250 1.254 1.259 1.263 1.268 1.272 1.276
[61] 1.281 1.285 1.290 1.294 1.298 1.303 1.307 1.312 1.316 1.320 1.325 1.329
[73] 1.333 1.338 1.342 1.347 1.351 1.355 1.360 1.364 1.369
> as.vector(mle[5] + tvec * mle[6] - mle[7]/mle[8])
 [1] -1.983 -1.978 -1.973 -1.967 -1.962 -1.957 -1.951 -1.946 -1.941 -1.935
[11] -1.930 -1.925 -1.919 -1.914 -1.909 -1.903 -1.898 -1.893 -1.887 -1.882
[21] -1.877 -1.871 -1.866 -1.861 -1.855 -1.850 -1.845 -1.840 -1.834 -1.829
[31] -1.824 -1.818 -1.813 -1.808 -1.802 -1.797 -1.792 -1.786 -1.781 -1.776
[41] -1.770 -1.765 -1.760 -1.754 -1.749 -1.744 -1.738 -1.733 -1.728 -1.722
[51] -1.717 -1.712 -1.706 -1.701 -1.696 -1.690 -1.685 -1.680 -1.674 -1.669
[61] -1.664 -1.658 -1.653 -1.648 -1.642 -1.637 -1.632 -1.626 -1.621 -1.616
[71] -1.610 -1.605 -1.600 -1.594 -1.589 -1.584 -1.578 -1.573 -1.568 -1.562
[81] -1.557
> 
> tdframe <- data.frame(linear = tvec, quad = tvec^2)
> m4 <- fbvlog(sl, nsloc1 = tdframe, nsloc2 = tvec)
> m4$estimate[1:3]
      loc1 loc1linear   loc1quad 
    3.5845     0.4570    -0.1858 
> m4$std.err[1:3]
      loc1 loc1linear   loc1quad 
   0.02742    0.08409    0.35635 
> pchisq(m1$deviance - m4$deviance, df = 1, lower.tail = FALSE)
[1] 0.6047
> 
> fbvlog(sl, nsloc1 = tvec, nsloc2 = tvec)
$estimate
     loc1 loc1trend    scale1    shape1      loc2 loc2trend    scale2    shape2 
  3.57566   0.43946   0.15880   0.06640   2.54897   0.53289   0.20701   0.04781 
      dep 
  0.70283 

$std.err
     loc1 loc1trend    scale1    shape1      loc2 loc2trend    scale2    shape2 
  0.02173   0.07540   0.01699   0.09768   0.03102   0.17208   0.02346   0.07607 
      dep 
  0.09551 

$deviance
[1] -36.5

$counts
function gradient 
      57       15 

> fbvlog(sl, nsloc1 = tdframe, nsloc2 = tvec, loc1quad = 0)
$estimate
      loc1 loc1linear     scale1     shape1       loc2  loc2trend     scale2 
   3.57565    0.43946    0.15880    0.06640    2.54897    0.53289    0.20701 
    shape2        dep 
   0.04781    0.70283 

$std.err
      loc1 loc1linear     scale1     shape1       loc2  loc2trend     scale2 
   0.02173    0.07540    0.01699    0.09768    0.03102    0.17208    0.02346 
    shape2        dep 
   0.07607    0.09551 

$deviance
[1] -36.5

$counts
function gradient 
      64       15 

> 
> m5 <- fbvlog(sl, nsloc1 = tvec, nsloc2 = tvec, shape1 = 0, shape2 = 0)
> pchisq(m5$deviance - m1$deviance, df = 2, lower.tail = FALSE)
[1] 0.7169
> m6 <- fbvlog(sl, nsloc1 = tvec, nsloc2 = tvec, dep = 1)
> m6$deviance - m1$deviance
[1] 13.59
> 
> #fbvall(sl, nsloc1 = tvec, nsloc2 = tvec)
> 
> 
> 
> 
> 
