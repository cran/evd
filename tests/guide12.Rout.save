
R : Copyright 2002, The R Development Core Team
Version 1.4.1  (2002-01-30)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type `license()' or `licence()' for distribution details.

R is a collaborative project with many contributors.
Type `contributors()' for more information.

Type `demo()' for some demos, `help()' for on-line help, or
`help.start()' for a HTML browser interface to help.
Type `q()' to quit R.

> ###################
> # FROM MANUAL 1.2 #
> ###################
> 
> library(evd)
> options(digits = 4, width = 80)
> set.seed(50)
> 
> # Section: Standard Univariate Functions
> 
> rgev(6, loc = c(20,1), scale = .5, shape = 1)
[1] 19.6355  2.6562 23.7309  0.6468 20.3299  3.0512
> qrweibull(seq(0.1, 0.4, 0.1), 2, 0.5, 1, lower.tail = FALSE)
[1] 1.947 1.888 1.822 1.745
> qrweibull(seq(0.9, 0.6, -0.1), loc = 2, scale = 0.5, shape = 1)
[1] 1.947 1.888 1.822 1.745
> pfrechet(2:6, 2, 0.5, 1)
[1] 0.0000 0.6065 0.7788 0.8465 0.8825
> pfrechet(2:6, 2, 0.5, 1, low = FALSE)
[1] 1.0000 0.3935 0.2212 0.1535 0.1175
> drweibull(-1:3, 2, 0.5, log = TRUE)
[1] -5.307 -3.307 -1.307   -Inf   -Inf
> dgumbel(-1:3, 0, 1)
[1] 0.17937 0.36788 0.25465 0.11820 0.04737
> 
> rext(4, qexp, rate = 1, mlen = 5)
[1] 2.2001 0.8584 4.5595 3.9397
> rext(4, distn = "exp", rate = 1, mlen = 5)
[1] 1.604 1.599 4.053 2.220
> rext(4, distn = "exp", mlen = 5)
[1] 4.906 3.304 3.157 2.291
> rext(1, distn = "norm", sd = 2, mlen = 20, largest = FALSE)
[1] -4.403
> min(rnorm(20, mean = 0, sd = 2))
[1] -2.612
> pext(c(.4, .5), distn = "norm", mean = 0.5, sd = c(1, 2), mlen = 4)
[1] 0.04484 0.06250
> dext(c(1, 4), distn = "gamma", shape = 1, scale = 0.3, mlen = 100)
[1] 0.3261328 0.0005398
> 
> rorder(1, distn = "norm", mlen = 20, j = 2)
[1] 2.284
> rorder(1, distn = "norm", mlen = 20, j = 19, largest = FALSE)
[1] 1.056
> porder(c(1, 2), distn = "gamma", shape = c(.5, .7), mlen = 10, j = 2)
[1] 0.5177 0.8259
> dorder(c(1, 2), distn = "gamma", shape = c(.5, .7), mlen = 10, j = 2)
[1] 0.7473 0.3081
> 
> # Section: Standard Bivariate Functions
> 
> rbvalog(3, dep = .8, asy = c(.4, 1))
         [,1]    [,2]
[1,]  0.07876 -0.7971
[2,]  0.01091 -0.8113
[3,] -0.10491 -0.8831
> rbvnegbilog(3, alpha = .5, beta = 1.2, mar1 = c(1, 1, 1))
       [,1]  [,2]
[1,] 0.7417 1.085
[2,] 0.8391 1.825
[3,] 2.0142 2.280
> pbvaneglog(c(1, 1.2), dep = .4, asy = c(.4, .6), mar1 = c(1, 1, 1))
[1] 0.173
> tmp.quant <- matrix(c(1,1.2,1,2),ncol = 2, byrow = TRUE)
> tmp.mar <- matrix(c(1,1,1,1.2,1.2,1.2), ncol = 3, byrow = TRUE)
> pbvaneglog(tmp.quant, dep = .4, asy = c(.4, .6), mar1 = tmp.mar)
[1] 0.173 0.175
> dbvct(c(1, 1.2), alpha = .2, beta = .6, mar1 = c(1, 1, 1))
[1] 0.1213
> dbvct(tmp.quant, alpha = 0.2, beta = 0.6, mar1 = tmp.mar)
[1] 0.1213 0.0586
> abvlog(dep = .3)
[1] 0.6156
> abvlog(seq(0, 1, 0.25), dep = .3)
[1] 1.0000 0.7557 0.6156 0.7557 1.0000
> 
> # Section: Standard Multivariate Functions
> 
> rmvlog(3, dep = .6, d = 5)
        [,1]    [,2]    [,3]     [,4]  [,5]
[1,]  0.1335  0.2878 1.07886  1.55515 1.310
[2,]  1.7100  0.9453 1.02070 -0.02553 1.527
[3,] -0.3376 -0.5814 0.07426  0.10906 2.827
> tmp.mar <- matrix(c(1,1,1,1,1,1.5,1,1,2), ncol = 3, byrow = TRUE)
> rmvlog(3, dep = .6, d = 5, mar = tmp.mar)
      [,1]   [,2]   [,3]   [,4]  [,5]
[1,] 2.803 4.6415 1.8531 3.5569 8.854
[2,] 0.751 0.9704 2.3328 2.6537 1.233
[3,] 4.641 1.4321 0.5825 0.6041 2.021
> tmp.quant <- matrix(rep(c(1,1.5,2), 5), ncol = 5)
> pmvlog(tmp.quant, dep = .6, d = 5, mar = tmp.mar)
[1] 0.07233 0.16387 0.21949
> 
> asy <- list(.4, 0, .6, c(.3,.2), c(.1,.1), c(.4,.1), c(.2,.4,.2))
> rmvalog(3, dep = c(.6,.5,.8,.3), asy = asy, d = 3)
         [,1]    [,2]    [,3]
[1,]  0.52375 -0.8844  1.4898
[2,]  1.16174 -0.4368 -0.7404
[3,] -0.03737  1.5139 -0.5996
> pmvalog(c(2, 2, 2), dep = c(.6,.5,.8,.3), asy = asy, d = 3)
[1] 0.7223
> tmp.quant <- matrix(rep(c(1,1.5,2), 3), ncol = 3)
> pmvalog(tmp.quant, dep = c(.6,.5,.8,.3), asy = asy, d = 3)
[1] 0.4131 0.5849 0.7223
> asy <- list(0, 0, 0, 0, c(0,0), c(0,0), c(0,0), c(0,0), c(0,0), c(0,0), c(.2,.1,.2), c(.1,.1,.2), c(.3,.4,.1), c(.2,.2,.2), c(.4,.6,.2,.5))
> rmvalog(3, dep = c(rep(1,6),.7,.3,.8,.7,.5), asy = asy, d = 4)
        [,1]    [,2]    [,3]    [,4]
[1,] -0.5930 -0.1916  1.0211  0.6113
[2,]  4.3522 -1.0050  2.3618 -0.1875
[3,]  0.5805  0.4443 -0.5958  0.9717
> asy <- list(.4, 0, .6, c(.3,.2), c(0,0), c(.4,.1), c(.3,.4,.3))
> rmvalog(3, dep = c(.6,1,.8,.3), asy = asy, d = 3)
       [,1]    [,2]    [,3]
[1,]  4.627  2.9125  0.9414
[2,]  1.200  0.1556  0.2048
[3,] -1.159 -0.8749 -1.0340
> 
> # Section: Fitting Univariate Distributions by Maximum Likelihood
> 
> data1 <- rgev(1000, loc = 0.13, scale = 1.1, shape = 0.2)
> m1 <- fgev(data1)
> m1

Call: fgev(x = data1) 
Deviance: 3645 

Estimates
  loc  scale  shape  
0.165  1.137  0.204  

Standard Errors
   loc   scale   shape  
0.0405  0.0322  0.0249  

Optimization Information
  Convergence: successful 
  Function Evaluations: 56 
  Gradient Evaluations: 12 

> m2 <- fgev(data1, loc = 0, scale = 1)
> m2

Call: fgev(x = data1, loc = 0, scale = 1) 
Deviance: 3670 

Estimates
shape  
0.228  

Standard Errors
 shape  
0.0212  

Optimization Information
  Convergence: successful 
  Function Evaluations: 23 
  Gradient Evaluations: 7 

> fitted(m1)
   loc  scale  shape 
0.1650 1.1368 0.2035 
> std.errors(m1)
    loc   scale   shape 
0.04053 0.03215 0.02486 
> anova(m1,m2)
Analysis of Deviance Table

   M.Df Deviance Df Chisq Pr(>chisq)    
m1    3     3645                        
m2    1     3670  2  25.2    3.4e-06 ***
---
Signif. codes:  0 `***' 0.001 `**' 0.01 `*' 0.05 `.' 0.1 ` ' 1 
> 
> data2 <- rext(100, qnorm, mean = 0.56, mlen = 365)
> nm <- fext(data2, list(mean = 0, sd = 1), distn = "norm", mlen = 365)
> fitted(nm)
  mean     sd 
0.5950 0.9928 
> ga <- fext(data2, list(scale = 1), shape = 0.5, distn = "gamma", mlen = 365)
> fitted(ga)
 scale 
0.7396 
> 
> # Section: Fitting Bivariate Distributions by Maximum Likelihood
> 
> bvdata <- rbvlog(100, dep = 0.6, mar1 = c(1.2,1.4,0), mar2 = c(1,1.6,0.1))
> m1 <- fbvlog(bvdata)
> m1

Call: fbvlog(x = bvdata) 
Deviance: 772.8 

Estimates
  loc1  scale1  shape1    loc2  scale2  shape2     dep  
1.1688  1.6731  0.0241  1.0012  1.6652  0.1235  0.4763  

Standard Errors
  loc1  scale1  shape1    loc2  scale2  shape2     dep  
0.1884  0.1424  0.0698  0.1852  0.1429  0.0665  0.0480  

Optimization Information
  Convergence: successful 
  Function Evaluations: 52 
  Gradient Evaluations: 14 

> m2 <- fbvlog(bvdata, dep = 1)
> fitted(m2)
   loc1  scale1  shape1    loc2  scale2  shape2 
1.19204 1.66900 0.02933 0.97984 1.66732 0.13177 
> m3 <- fbvlog(bvdata, shape1 = 0, shape2 = 0)
> anova(m1, m3)
Analysis of Deviance Table

   M.Df Deviance Df Chisq Pr(>chisq)  
m1    7      773                      
m3    5      777  2  4.71      0.095 .
---
Signif. codes:  0 `***' 0.001 `**' 0.01 `*' 0.05 `.' 0.1 ` ' 1 
> 
> # Boundary Problems
> 
> m4 <- fbvalog(bvdata)
> fitted(m4)
   loc1  scale1  shape1    loc2  scale2  shape2    asy1    asy2     dep 
1.19015 1.70785 0.02964 0.97453 1.63160 0.13115 0.79884 0.96855 0.38475 
> fitted(fbvalog(bvdata, asy1 = 1))
   loc1  scale1  shape1    loc2  scale2  shape2    asy2     dep 
1.13391 1.75188 0.02075 0.99693 1.72568 0.11283 0.99930 0.47330 
> upper <- c(rep(Inf, 6), 1, 1, 1) 
> fitted(fbvalog(bvdata, method = "L-BFGS-B", upper = upper))
   loc1  scale1  shape1    loc2  scale2  shape2    asy1    asy2     dep 
1.19019 1.70787 0.02967 0.97451 1.63160 0.13117 0.79877 0.96855 0.38471 
> 
> # Section: Extended Example: Oxford Data
> 
> data(oxford) ; ox <- oxford
> ox.fit <- fgev(ox)
> tt <- (1901:1980 - 1950)/100
> ox.fit.trend <- fgev(ox, nsloc = tt)
> fitted(ox.fit.trend)
     loc loctrend    scale    shape 
 83.6617  -1.8812   4.2233  -0.2841 
> std.errors(ox.fit.trend)
     loc loctrend    scale    shape 
 0.55566  1.96754  0.36504  0.07068 
> ox.fit

Call: fgev(x = ox) 
Deviance: 457.8 

Estimates
   loc   scale   shape  
83.839   4.260  -0.287  

Standard Errors
   loc   scale   shape  
0.5231  0.3658  0.0683  

Optimization Information
  Convergence: successful 
  Function Evaluations: 29 
  Gradient Evaluations: 11 

> 
> ox.fit.gum <- fgev(ox, shape = 0)
> anova(ox.fit, ox.fit.gum)
Analysis of Deviance Table

           M.Df Deviance Df Chisq Pr(>chisq)    
ox.fit        3      458                        
ox.fit.gum    2      470  1    12    0.00053 ***
---
Signif. codes:  0 `***' 0.001 `**' 0.01 `*' 0.05 `.' 0.1 ` ' 1 
> ox.prof <- profile(ox.fit)
[1] "profiling loc"
[1] "profiling scale"
[1] "profiling shape"
> #ox.prof2d <- profile2d(ox.fit, ox.prof, which = c("scale", "shape"))
> 
> ox.qfit <- fgev.quantile(ox, prob = 0.1)
> ox.qprof <- profile(ox.qfit, which = "quantile")
[1] "profiling quantile"
> 
> ox.nm <- fext(ox, list(mean = 40, sd = 1), distn = "norm", mlen = 365)
> fitted(ox.nm)
 mean    sd 
48.85 12.43 
> ox.ga <- fext(ox, list(scale = 1, shape = 1), distn = "gamma", mlen = 365)
> fitted(ox.ga)
scale shape 
 1.63 32.94 
> 
> # Section: Extended Example: Sea Level Data
> 
> data(sealevel) ; sl <- sealevel
> tt <- (1912:1992 - 1950)/100
> m1 <- fbvlog(sl, nsloc1 = tt, nsloc2 = tt)
> m2 <- fbvlog(sl, nsloc1 = tt)
> m3 <- fbvlog(sl)
> anova(m1, m2, m3)
Analysis of Deviance Table

   M.Df Deviance Df Chisq Pr(>chisq)    
m1    9    -36.5                        
m2    8    -29.2  1  7.26      0.007 ** 
m3    7     -9.7  1 19.56    9.7e-06 ***
---
Signif. codes:  0 `***' 0.001 `**' 0.01 `*' 0.05 `.' 0.1 ` ' 1 
> 
> tdframe <- data.frame(trend = tt, quad = tt^2)
> m4 <- fbvlog(sl, nsloc1 = tdframe, nsloc2 = tt)
> m5 <- fbvlog(sl, nsloc1 = tt, nsloc2 = tdframe)
> m6 <- fbvlog(sl, nsloc1 = tdframe, nsloc2 = tdframe)
> 
> m7 <- fbvlog(sl, nsloc1 = tt, nsloc2 = tt, dep = 1)
> deviance(m7) - deviance(m1)
[1] 13.59
> m8 <- fbvlog(sl, nsloc1 = tt, nsloc2 = tt, shape1 = 0, shape2 = 0)
> anova(m1, m8)
Analysis of Deviance Table

   M.Df Deviance Df Chisq Pr(>chisq)
m1    9    -36.5                    
m8    7    -35.8  2  0.67       0.72
> 
> #m1.prof <- profile(m1, which = "dep", xmax = 1)
> #m.all <- fbvall(sl, nsloc1 = tt, nsloc2 = tt)
> #fitted(m.all)
> #m.all$dep.summary
> #m.all$criteria
> 
> m9 <- fbvalog(sl, nsloc1 = tt, nsloc2 = tt)
> 
